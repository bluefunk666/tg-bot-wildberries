from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher, executor
from loader import bot
from aiogram.dispatcher.filters import Text
from misc.throttling import rate_limit
from misc.db_api import quick_commands as commands
from misc.db_api.schemas.user import User
from keyboards.client_kb import otmena, start_re, menu_but, kb_client, zakaz_da_net
from keyboards.admin_kb import admin_panel
from bs4 import BeautifulSoup
import logging
import time
import os
import aiohttp
from aiogram.utils import markdown as md
import html
import datetime
from dotenv import load_dotenv


class FSMuser(StatesGroup):
    photo = State()
    article = State()
    price = State()
    amount = State()

ADMIN_ID = os.getenv('ADMIN_ID')


@rate_limit(limit=3)
async def add_new_order(message):
    order = await quick_commands.get_last_order()
    
    
    await send_admin_notification(order)
    
    
@rate_limit(limit=3)
async def send_admin_notification(order):
  text = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ No{order.id} –æ—Ç {order.username} –Ω–∞ —Å—É–º–º—É {order.total_price} —Ä—É–±"
  
  await bot.send_message(ADMIN_ID, text)




@rate_limit(limit=3)
async def admin(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω', reply_markup=admin_panel)
    else:
        await message.answer('–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã')


@rate_limit(limit=3)
async def count_users(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        count = await commands.count_users()
        await message.answer(count)
    else:
        await message.answer('–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã')

@rate_limit(limit=3)
async def count_users_24hrs(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        chat_id = message.from_user.id
        orders = await commands.count_users_last_24h()
        for order in orders:
            caption = ""
            caption += f"<b>ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {order.user_id}\n"
            caption += f"<b>–ê—Ä—Ç–∏–∫—É–ª:</b> <code>{order.article}</code>\n"
            caption += f"<b>–¶–µ–Ω–∞:</b> {order.price}\n"
            caption += f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {order.amount}\n\n"
            if order.username:
                caption += f"<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{order.username}\n"
            else:
                chat = await bot.get_chat(order.user_id)
                caption += f"<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <a href='tg://user?id={chat.id}'>{chat.first_name}</a>\n"
        
            caption += f"<b>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</b> {order.created_at.strftime('%d-%m-%Y %H:%M:%S')}\n"
            await bot.send_photo(chat_id=chat_id, photo=order.photo, caption=caption, parse_mode='HTML')
    else:
        await message.answer('–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã')
    
    

@rate_limit(limit=3)
async def cm_start(message : types.Message):
    await FSMuser.photo.set()
    await message.reply('üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞\n‚ùóÔ∏è –í–∞–∂–Ω–æ: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –í—ã –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑', reply_markup=otmena)


async def all_users(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
         chat_id = message.from_user.id
         users = await commands.all_users()
         for user in users:
             caption = ""
             caption += f"<b>ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user.user_id}\n"
             caption += f"<b>–ê—Ä—Ç–∏–∫—É–ª:</b> <code>{user.article}</code>\n"
             caption += f"<b>–¶–µ–Ω–∞:</b> {user.price}\n"
             caption += f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {user.amount}\n\n"
             if user.username:
                caption += f"<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{user.username}\n"
             else:
                chat = await bot.get_chat(user.user_id)
                caption += f"<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <a href='tg://user?id={chat.id}'>{chat.first_name}</a>\n"
             caption += f"<b>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</b> {user.created_at.strftime('%d-%m-%Y %H:%M:%S')}\n"
             await bot.send_photo(chat_id=chat_id, photo=user.photo, caption=caption, parse_mode='HTML')
    else:
        await message.answer('–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã')


@rate_limit(limit=3)
async def vse_zakazi(message: types.Message):
    user_id = message.from_user.id
    users = await commands.get_user_data_last_30min(user_id)
    result = []
    for user in users:
        result.append(user.price * user.amount)
    total = sum(result) * 1.1
    await message.reply(f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤, —É—á–∏—Ç—ã–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫—É —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {total:.2f} —Ä—É–±–ª–µ–π.\n–û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏", reply_markup=menu_but)


async def not_photo(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name
    logging.info(f'{user_id=} {user_full_name=}, {time.asctime()}')
    if message.text == '‚ùå–û—Ç–º–µ–Ω–∞':
        current_state = await state.get_state()
        if current_state is not None:
            await state.finish()
        await bot.send_message(message.from_user.id, '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑ –∏ –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb_client)
    elif message.text == 'üÜò –ü–æ–º–æ—â—å':
        await bot.send_message(message.from_user.id,
                               f"{user_full_name}, –µ—Å–ª–∏ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –∏–ª–∏ –í–∞–º –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞, "
                               f"–≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ú–∞–∫—Å–∏–º—É –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á—É - @Maxim_MironovDNR", reply_markup=menu_but)
        await state.finish()
    elif message.text == 'üîô –ú–µ–Ω—é':
        await bot.send_message(message.from_user.id, f'{user_full_name}, –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                               reply_markup=kb_client)
        await state.finish()
    else:
        await message.answer('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è')

@rate_limit(limit=3)
async def load_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    await FSMuser.next()
    await message.reply('üî¢ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞', reply_markup=otmena)


@rate_limit(limit=3)
async def load_article(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name
    logging.info(f'{user_id=} {user_full_name=}, {time.asctime()}')
    if message.text == '‚ùå–û—Ç–º–µ–Ω–∞':
        await bot.send_message(message.from_user.id, '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑ –∏ –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb_client)
        await state.finish()
    elif message.text == 'üÜò –ü–æ–º–æ—â—å':
        await bot.send_message(message.from_user.id,
                         f"{user_full_name}, –µ—Å–ª–∏ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –∏–ª–∏ –í–∞–º –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ "
                         f"–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ú–∞–∫—Å–∏–º—É –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á—É - @Maxim_MironovDNR", reply_markup=menu_but)
        await state.finish()
    else:
        async with state.proxy() as data:
            data['article'] = message.text

        await FSMuser.next()
        await message.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ üíµ (–¶–∏—Ñ—Ä–∞–º–∏)', reply_markup=otmena)


@rate_limit(limit=3)
async def load_price(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name
    logging.info(f'{user_id=} {user_full_name=}, {time.asctime()}')
    if message.text.isdigit():
        async with state.proxy() as data:
            data['price'] = int(message.text)
        await bot.send_message(message.from_user.id, "‚ùì –í –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ?", reply_markup=otmena)
        await FSMuser.next()
    elif message.text == '‚ùå–û—Ç–º–µ–Ω–∞':
        await bot.send_message(message.from_user.id, '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑ –∏ –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb_client)
        await state.finish()
    elif message.text == 'üÜò –ü–æ–º–æ—â—å':
        await bot.send_message(message.from_user.id,
                         f"{user_full_name}, –µ—Å–ª–∏ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –∏–ª–∏ –í–∞–º –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ "
                         f"–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ú–∞–∫—Å–∏–º—É –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á—É - @Maxim_MironovDNR", reply_markup=menu_but)
        await state.finish()

    else:
        await message.reply('–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã')
        if message.text.isdigit():
            async with state.proxy() as data:
                data['price'] = int(message.text)
            await bot.send_message(message.from_user.id, "‚ùì –í –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ?", reply_markup=otmena)
            await FSMuser.next()

    
@rate_limit(limit=3)
async def amount(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        async with state.proxy() as data:
            data['amount'] = int(message.text)
        async with state.proxy() as data:
            combined_data = f"Photo: {data['photo']}, Article: {data['article']}, Price: {data['price']}, Amount: {data['amount']}"
            values = combined_data.split(", ")
            user_id = message.from_user.id
            username = message.from_user.username
            photo, article, price, amount = [value.split(": ")[1] for value in values]
            await commands.create_table(user_id=user_id, username=username, photo=photo, article=article,
                                        price=int(price), amount=int(amount))
            itog = round(data['price'] * data['amount'] * 1.1)
            await message.reply(f"‚úîÔ∏è –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n–•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä? ", reply_markup=zakaz_da_net)

            await state.finish()
    else:
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –≤–∞–º —Ç–æ–≤–∞—Ä–∞ –≤ —Ü–∏—Ñ—Ä–∞—Ö')
        if message.text.isdigit():
            async with state.proxy() as data:
                data['amount'] = int(message.text)
            async with state.proxy() as data:
                combined_data = f"Photo: {data['photo']}, Article: {data['article']}, Price: {data['price']}, Amount: {data['amount']}"
                values = combined_data.split(", ")
                user_id = message.from_user.first_name
                username = message.from_user.full_name
                photo, article, price, amount = [value.split(": ")[1] for value in values]
                await commands.create_table(user_id=user_id, username=username, photo=photo, article=article,
                                             price=int(price), amount=int(amount))
                itog = round(data['price'] * data['amount'] * 1.1)
                await message.reply(f"‚úîÔ∏è –•–æ—Ä–æ—à–æ, –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, —É—á–∏—Ç—ã–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫—É = {itog}. \n–•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä?", reply_markup=zakaz_da_net)


                await state.finish()


@rate_limit(limit=3)
async def help(message:types.Message):
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name
    logging.info(f'{user_id=} {user_full_name=}, {time.asctime()}')
    await bot.send_message(message.from_user.id, f"{user_full_name}, –µ—Å–ª–∏ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –∏–ª–∏ –í–∞–º –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞"
                                                 f"–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ú–∞–∫—Å–∏–º—É –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á—É - @Maxim_MironovDNR", reply_markup=menu_but)

@rate_limit(limit=3)
async def after_order(message:types.message):
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name
    logging.info(f'{user_id=} {user_full_name=}, {time.asctime()}')
    await bot.send_message(message.from_user.id, f'{user_full_name}, –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb_client)

    


@rate_limit(limit=3)
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await bot.send_message(message.from_user.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb_client)



    
def register_handlers_fsmuser(dp : Dispatcher ):
    dp.register_message_handler(cm_start, lambda message: '–ù–∞—á–∞—Ç—å' in message.text, state = None)
    dp.register_message_handler(cm_start, Text(equals='–Ω–∞—á–∞—Ç—å', ignore_case=True), state=None)
    dp.register_message_handler(cm_start, Text(equals='–î–∞, —è —Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä', ignore_case=True), state=None)
    dp.register_message_handler(not_photo, lambda message: not message.photo, state=FSMuser.photo)
    dp.register_message_handler(load_photo, content_types =['photo'], state=FSMuser.photo)
    dp.register_message_handler(load_article, state = FSMuser.article)
    dp.register_message_handler(load_price, state = FSMuser.price)
    dp.register_message_handler(amount, state=FSMuser.amount)
    dp.register_message_handler(help, lambda message: '–ü–æ–º–æ—â—å' in message.text, state ='*')
    dp.register_message_handler(help, Text(equals='–ü–æ–º–æ—â—å', ignore_case=True), state='*')
    dp.register_message_handler(vse_zakazi, Text(equals='–ù–µ—Ç, —è —É–∂–µ –∑–∞–∫–∞–∑–∞–ª –≤—Å–µ —Ç–æ–≤–∞—Ä—ã', ignore_case=True))
    dp.register_message_handler(cancel_handler, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
    dp.register_message_handler(after_order, lambda message: '–ú–µ–Ω—é' in message.text)
    dp.register_message_handler(after_order, Text(equals='–º–µ–Ω—é', ignore_case=True), state="*")
    dp.register_message_handler(admin, Text(equals='–∞–¥–º–∏–Ω', ignore_case=True), state="*")
    dp.register_message_handler(count_users, lambda message: "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤" in message.text)
    dp.register_message_handler(all_users, lambda message: "–ó–∞–∫–∞–∑—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è" in message.text)
    dp.register_message_handler(count_users_24hrs, lambda message: "–ó–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è" in message.text)
    dp.register_message_handler(add_new_order, lambda message: message.text.lower() == '–ù–µ—Ç, —è —É–∂–µ –∑–∞–∫–∞–∑–∞–ª –≤—Å–µ —Ç–æ–≤–∞—Ä—ã') 
    dp.register_message_handler(send_admin_notification, lambda message: message.text.lower() == '–ù–µ—Ç, —è —É–∂–µ –∑–∞–∫–∞–∑–∞–ª –≤—Å–µ —Ç–æ–≤–∞—Ä—ã')
    
